install.packages('dplyr')
install.packages('readXL')
install.packages('readxl')
install.packages('data.table')
us_gas_pipes_A = readxl::read_xlsx('U.S. Gas Transmission Clean Up.xlsx')
us_gas_pipes_A = readxl::read_xlsx('C:/Users/frank/Google Drive/WorkU.S. Gas Transmission Clean Up.xlsx')
us_gas_pipes_A = read_excel('C:/Users/frank/Google Drive/WorkU.S. Gas Transmission Clean Up.xlsx')
library(data.table)
library(dplyr)
library(readxl)
us_gas_pipes_A = read_excel('C:/Users/frank/Google Drive/WorkU.S. Gas Transmission Clean Up.xlsx')
us_lng_pipes_A = as.data.table(read_excel('C:/Users/frank/Google Drive/Work/U.S. LNG Clean Up.xlsx',
sheet = 'A'))
rm(list=ls())
library(data.table)
library(dplyr)
library(sqldf)
library(readxl)
us_lng_pipes_A = as.data.table(read_excel('C:/Users/frank/Google Drive/Work/U.S. LNG Clean Up.xlsx',
sheet = 'A'))
rm(list=ls())
library(data.table)
library(dplyr)
library(sqldf)
library(readxl)
us_lng_pipes_A = as.data.table(read_excel('C:/Users/frank/Google Drive/Work/U.S. LNG Clean Up.xlsx',
sheet = 'A'))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
install.packages("faraway")
install.packages("tibble")
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(readr)
library(class)
library(formatR)
q1_train_data = read.csv("h3p1-trn-data.csv")
q1_test_data = read.csv("h3p1-tst-data.csv")
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
simple_class_1 = function(data) {
ifelse(data$x1 > 0, "dodgerblue", "darkorange")
}
simple_class_2 = function(data) {
ifelse(data$x2 > data$x1 + 1, "dodgerblue", "darkorange")
}
simple_class_3 = function(data) {
ifelse(data$x2 > data$x1 + 1, "dodgerblue", ifelse(data$x2 < data$x1 -
1, "dodgerblue", "darkorange"))
}
simple_class_4 = function(data) {
ifelse(data$x2 > (data$x1 + 1)^2, "dodgerblue", ifelse(data$x2 < -(data$x1 -
1)^2, "dodgerblue", "darkorange"))
}
classifier = c(simple_class_1, simple_class_2, simple_class_3, simple_class_4)
trn_std_err = sapply(classifier, calc_class_err, data = q1_train_data)
q1_train_data = read.csv("h3p1-trn-data.csv")
q1_test_data = read.csv("h3p1-tst-data.csv")
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
simple_class_1 = function(data) {
ifelse(data$x1 > 0, "dodgerblue", "darkorange")
}
simple_class_2 = function(data) {
ifelse(data$x2 > data$x1 + 1, "dodgerblue", "darkorange")
}
simple_class_3 = function(data) {
ifelse(data$x2 > data$x1 + 1, "dodgerblue", ifelse(data$x2 < data$x1 -
1, "dodgerblue", "darkorange"))
}
simple_class_4 = function(data) {
ifelse(data$x2 > (data$x1 + 1)^2, "dodgerblue", ifelse(data$x2 < -(data$x1 -
1)^2, "dodgerblue", "darkorange"))
}
classifier = c(simple_class_1, simple_class_2, simple_class_3, simple_class_4)
trn_std_err = sapply(classifier, calc_class_err, data = q1_train_data)
q1_train_data = read.csv("h3p1-trn-data.csv")
q1_test_data = read.csv("h3p1-tst-data.csv")
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
simple_class_1 = function(data) {
ifelse(data$x1 > 0, "dodgerblue", "darkorange")
}
simple_class_2 = function(data) {
ifelse(data$x2 > data$x1 + 1, "dodgerblue", "darkorange")
}
simple_class_3 = function(data) {
ifelse(data$x2 > data$x1 + 1, "dodgerblue", ifelse(data$x2 < data$x1 -
1, "dodgerblue", "darkorange"))
}
simple_class_4 = function(data) {
ifelse(data$x2 > (data$x1 + 1)^2, "dodgerblue", ifelse(data$x2 < -(data$x1 -
1)^2, "dodgerblue", "darkorange"))
}
classifier = c(simple_class_1, simple_class_2, simple_class_3, simple_class_4)
trn_std_err = sapply(classifier, calc_class_err)
q1_train_data = read.csv("h3p1-trn-data.csv")
q1_test_data = read.csv("h3p1-tst-data.csv")
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
simple_class_1 = function(data) {
ifelse(data$x1 > 0, "dodgerblue", "darkorange")
}
simple_class_2 = function(data) {
ifelse(data$x2 > data$x1 + 1, "dodgerblue", "darkorange")
}
simple_class_3 = function(data) {
ifelse(data$x2 > data$x1 + 1, "dodgerblue", ifelse(data$x2 < data$x1 -
1, "dodgerblue", "darkorange"))
}
simple_class_4 = function(data) {
ifelse(data$x2 > (data$x1 + 1)^2, "dodgerblue", ifelse(data$x2 < -(data$x1 -
1)^2, "dodgerblue", "darkorange"))
}
classifier = c(simple_class_1, simple_class_2, simple_class_3, simple_class_4)
trn_std_err = apply(classifier, calc_class_err, data = q1_train_data)
q1_train_data = read.csv("h3p1-trn-data.csv")
q1_test_data = read.csv("h3p1-tst-data.csv")
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
simple_class_1 = function(data) {
ifelse(data$x1 > 0, "dodgerblue", "darkorange")
}
simple_class_2 = function(data) {
ifelse(data$x2 > data$x1 + 1, "dodgerblue", "darkorange")
}
simple_class_3 = function(data) {
ifelse(data$x2 > data$x1 + 1, "dodgerblue", ifelse(data$x2 < data$x1 -
1, "dodgerblue", "darkorange"))
}
simple_class_4 = function(data) {
ifelse(data$x2 > (data$x1 + 1)^2, "dodgerblue", ifelse(data$x2 < -(data$x1 -
1)^2, "dodgerblue", "darkorange"))
}
classifier = list(simple_class_1, simple_class_2, simple_class_3, simple_class_4)
trn_std_err = sapply(classifier, calc_class_err, data = q1_train_data)
View(q1_test_data)
q1_train_data = read.csv("h3p1-trn-data.csv")
q1_test_data = read.csv("h3p1-tst-data.csv")
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
simple_class_1 = function(data) {
ifelse(data$x1 > 0, "dodgerblue", "darkorange")
}
simple_class_2 = function(data) {
ifelse(data$x2 > data$x1 + 1, "dodgerblue", "darkorange")
}
simple_class_3 = function(data) {
ifelse(data$x2 > data$x1 + 1, "dodgerblue", ifelse(data$x2 < data$x1 -
1, "dodgerblue", "darkorange"))
}
simple_class_4 = function(data) {
ifelse(data$x2 > (data$x1 + 1)^2, "dodgerblue", ifelse(data$x2 < -(data$x1 -
1)^2, "dodgerblue", "darkorange"))
}
trn_std_err = c()
tst_std_err = c()
q1_train_data$c1_pred = simple_class_1(data = q1_train_data)
q1_test_data$c1_pred = simple_class_1(data = q1_test_data)
q1_train_data$c2_pred = simple_class_2(data = q1_train_data)
q1_test_data$c2_pred = simple_class_2(data = q1_test_data)
q1_train_data$c3_pred = simple_class_3(data = q1_train_data)
q1_test_data$c3_pred = simple_class_3(data = q1_test_data)
q1_train_data$c4_pred = simple_class_4(data = q1_train_data)
q1_test_data$c4_pred = simple_class_4(data = q1_test_data)
trn_std_err = c(trn_std_err, calc_class_err(actual = q1_train_data$y, predicted = q1_train_data$c1_pred))
trn_std_err = c(trn_std_err, calc_class_err(actual = q1_train_data$y, predicted = q1_train_data$c3_pred))
trn_std_err = c(trn_std_err, calc_class_err(actual = q1_train_data$y, predicted = q1_train_data$c2_pred))
trn_std_err = c(trn_std_err, calc_class_err(actual = q1_train_data$y, predicted = q1_train_data$c4_pred))
tst_std_err = c(tst_std_err, calc_class_err(actual = q1_test_data$y, predicted = q1_test_data$c1_pred))
tst_std_err = c(tst_std_err, calc_class_err(actual = q1_test_data$y, predicted = q1_test_data$c2_pred))
tst_std_err = c(tst_std_err, calc_class_err(actual = q1_test_data$y, predicted = q1_test_data$c3_pred))
tst_std_err = c(tst_std_err, calc_class_err(actual = q1_test_data$y, predicted = q1_test_data$c4_pred))
model_name = c("C1", "C2", "C3", "C4")
result = data.frame(model_name, trn_std_err, tst_std_err)
colnames(result) = c("Classifier", "Train Standard Error", "Test Standard Error")
result %>% kable() %>% kable_styling()
q2_train_data = read.csv("h3p1-trn-data.csv")
q2_test_data = read.csv("h3p1-tst-data.csv")
get_logistic_error = function(mod, data, res = "y", pos = 1, neg = 0, cut = 0.5) {
probs = predict(mod, newdata = data, type = "response")
preds = ifelse(probs > cut, pos, neg)
calc_class_err(actual = data[, res], predicted = preds)
}
model_1 = glm(default ~ 1, data = q2_train_data, family = "binomial")
q2_train_data = read.csv("h3p1-trn-data.csv")
q2_test_data = read.csv("h3p1-tst-data.csv")
get_logistic_error = function(mod, data, res = "y", pos = 1, neg = 0, cut = 0.5) {
probs = predict(mod, newdata = data, type = "response")
preds = ifelse(probs > cut, pos, neg)
calc_class_err(actual = data[, res], predicted = preds)
}
model_1 = glm(y ~ 1, data = q2_train_data, family = "binomial")
model_2 = glm(y ~ ., data = q2_train_data, family = "binomial")
model_3 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2), data = default_trn, family = "binomial")
q2_train_data = read.csv("h3p1-trn-data.csv")
q2_test_data = read.csv("h3p1-tst-data.csv")
get_logistic_error = function(mod, data, res = "y", pos = 1, neg = 0, cut = 0.5) {
probs = predict(mod, newdata = data, type = "response")
preds = ifelse(probs > cut, pos, neg)
calc_class_err(actual = data[, res], predicted = preds)
}
model_1 = glm(y ~ 1, data = q2_train_data, family = "binomial")
model_2 = glm(y ~ ., data = q2_train_data, family = "binomial")
model_3 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2), data = q2_train_data, family = "binomial")
model_4 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2) + I(x1 * x2), data = q2_train_data, family = "binomial")
q2_train_data = read.csv("h3p1-trn-data.csv")
q2_test_data = read.csv("h3p1-tst-data.csv")
get_logistic_error = function(mod, data, res = "y", pos = 1, neg = 0, cut = 0.5) {
probs = predict(mod, newdata = data, type = "response")
preds = ifelse(probs > cut, pos, neg)
calc_class_err(actual = data[, res], predicted = preds)
}
model_1 = glm(y ~ 1, data = q2_train_data, family = "binomial")
model_2 = glm(y ~ ., data = q2_train_data, family = "binomial")
model_3 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2), data = q2_train_data, family = "binomial")
model_4 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2) + I(x1 * x2), data = q2_train_data, family = "binomial")
model_list = list(model_1, model_2, model_3)
train_errors = sapply(model_list, get_logistic_error, data = q2_train_data,
res = "default", pos = "Yes", neg = "No", cut = 0.5)
q2_train_data = read.csv("h3p1-trn-data.csv")
q2_test_data = read.csv("h3p1-tst-data.csv")
get_logistic_error = function(mod, data, res = "y", pos = 1, neg = 0, cut = 0.5) {
probs = predict(mod, newdata = data, type = "response")
preds = ifelse(probs > cut, pos, neg)
calc_class_err(actual = data[, res], predicted = preds)
}
model_1 = glm(y ~ 1, data = q2_train_data, family = "binomial")
model_2 = glm(y ~ ., data = q2_train_data, family = "binomial")
model_3 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2), data = q2_train_data, family = "binomial")
model_4 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2) + I(x1 * x2), data = q2_train_data, family = "binomial")
model_list = list(model_1, model_2, model_3)
train_errors = sapply(model_list, get_logistic_error, data = q2_train_data,
res = "y", pos = "Yes", neg = "No", cut = 0.5)
test_errors = sapply(model_list, get_logistic_error, data = q2_test_data,
res = "y", pos = "Yes", neg = "No", cut = 0.5)
q2_train_data = read.csv("h3p1-trn-data.csv")
q2_test_data = read.csv("h3p1-tst-data.csv")
get_logistic_error = function(mod, data, res = "y", pos = 1, neg = 0, cut = 0.5) {
probs = predict(mod, newdata = data, type = "response")
preds = ifelse(probs > cut, pos, neg)
calc_class_err(actual = data[, res], predicted = preds)
}
model_1 = glm(y ~ 1, data = q2_train_data, family = "binomial")
model_2 = glm(y ~ ., data = q2_train_data, family = "binomial")
model_3 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2), data = q2_train_data, family = "binomial")
model_4 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2) + I(x1 * x2), data = q2_train_data, family = "binomial")
model_list = list(model_1, model_2, model_3)
train_errors = sapply(model_list, get_logistic_error, data = q2_train_data,
res = "y", pos = "Yes", neg = "No", cut = 0.5)
test_errors = sapply(model_list, get_logistic_error, data = q2_test_data,
res = "y", pos = "Yes", neg = "No", cut = 0.5)
model_name = c("Model 1", "Model 2", "Model 3", "Model 4")
result = data.frame(model_name, train_errors, test_errors)
q2_train_data = read.csv("h3p1-trn-data.csv")
q2_test_data = read.csv("h3p1-tst-data.csv")
get_logistic_error = function(mod, data, res = "y", pos = 1, neg = 0, cut = 0.5) {
probs = predict(mod, newdata = data, type = "response")
preds = ifelse(probs > cut, pos, neg)
calc_class_err(actual = data[, res], predicted = preds)
}
model_1 = glm(y ~ 1, data = q2_train_data, family = "binomial")
model_2 = glm(y ~ ., data = q2_train_data, family = "binomial")
model_3 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2), data = q2_train_data, family = "binomial")
model_4 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2) + I(x1 * x2), data = q2_train_data, family = "binomial")
model_list = list(model_1, model_2, model_3, model_4)
train_errors = sapply(model_list, get_logistic_error, data = q2_train_data,
res = "y", pos = "Yes", neg = "No", cut = 0.5)
test_errors = sapply(model_list, get_logistic_error, data = q2_test_data,
res = "y", pos = "Yes", neg = "No", cut = 0.5)
model_name = c("Model 1", "Model 2", "Model 3", "Model 4")
result = data.frame(model_name, train_errors, test_errors)
colnames(result) = c("Classifier", "Train Standard Error", "Test Standard Error")
result %>% kable() %>% kable_styling()
q2_train_data = read.csv("h3p1-trn-data.csv")
q2_test_data = read.csv("h3p1-tst-data.csv")
get_logistic_error = function(mod, data, res = "y", pos = 1, neg = 0, cut = 0.5) {
probs = predict(mod, newdata = data, type = "response")
preds = ifelse(probs > cut, pos, neg)
calc_class_err(actual = data[, res], predicted = preds)
}
model_1 = glm(y ~ 1, data = q2_train_data, family = "binomial")
model_2 = glm(y ~ ., data = q2_train_data, family = "binomial")
model_3 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2), data = q2_train_data, family = "binomial")
model_4 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2) + I(x1 * x2), data = q2_train_data, family = "binomial")
model_list = list(model_1, model_2, model_3, model_4)
train_errors = sapply(model_list, get_logistic_error, data = q2_train_data,
res = "y", pos = "darkorange", neg = "dodgeblue", cut = 0.5)
test_errors = sapply(model_list, get_logistic_error, data = q2_test_data,
res = "y", pos = "darkorange", neg = "dodgeblue", cut = 0.5)
model_name = c("Model 1", "Model 2", "Model 3", "Model 4")
result = data.frame(model_name, train_errors, test_errors)
colnames(result) = c("Classifier", "Train Standard Error", "Test Standard Error")
result %>% kable() %>% kable_styling()
q2_train_data = read.csv("h3p1-trn-data.csv")
q2_test_data = read.csv("h3p1-tst-data.csv")
get_logistic_error = function(mod, data, res = "y", pos = 1, neg = 0, cut = 0.5) {
probs = predict(mod, newdata = data, type = "response")
preds = ifelse(probs > cut, pos, neg)
calc_class_err(actual = data[, res], predicted = preds)
}
model_1 = glm(y ~ , data = q2_train_data, family = "binomial")
q2_train_data = read.csv("h3p1-trn-data.csv")
q2_test_data = read.csv("h3p1-tst-data.csv")
get_logistic_error = function(mod, data, res = "y", pos = 1, neg = 0, cut = 0.5) {
probs = predict(mod, newdata = data, type = "response")
preds = ifelse(probs > cut, pos, neg)
calc_class_err(actual = data[, res], predicted = preds)
}
model_1 = glm(y ~ 0, data = q2_train_data, family = "binomial")
model_2 = glm(y ~ ., data = q2_train_data, family = "binomial")
model_3 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2), data = q2_train_data, family = "binomial")
model_4 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2) + I(x1 * x2), data = q2_train_data, family = "binomial")
model_list = list(model_1, model_2, model_3, model_4)
train_errors = sapply(model_list, get_logistic_error, data = q2_train_data,
res = "y", pos = "darkorange", neg = "dodgeblue", cut = 0.5)
test_errors = sapply(model_list, get_logistic_error, data = q2_test_data,
res = "y", pos = "darkorange", neg = "dodgeblue", cut = 0.5)
model_name = c("Model 1", "Model 2", "Model 3", "Model 4")
result = data.frame(model_name, train_errors, test_errors)
colnames(result) = c("Classifier", "Train Standard Error", "Test Standard Error")
result %>% kable() %>% kable_styling()
q2_train_data = read.csv("h3p1-trn-data.csv")
q2_test_data = read.csv("h3p1-tst-data.csv")
get_logistic_error = function(mod, data, res = "y", pos = 1, neg = 0, cut = 0.5) {
probs = predict(mod, newdata = data, type = "response")
preds = ifelse(probs > cut, pos, neg)
calc_class_err(actual = data[, res], predicted = preds)
}
model_1 = glm(y ~ 1, data = q2_train_data, family = "binomial")
model_2 = glm(y ~ ., data = q2_train_data, family = "binomial")
model_3 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2), data = q2_train_data, family = "binomial")
model_4 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2) + I(x1 * x2), data = q2_train_data, family = "binomial")
model_list = list(model_1, model_2, model_3, model_4)
train_errors = sapply(model_list, get_logistic_error, data = q2_train_data,
res = "y", pos = "darkorange", neg = "dodgeblue", cut = 0.5)
test_errors = sapply(model_list, get_logistic_error, data = q2_test_data,
res = "y", pos = "darkorange", neg = "dodgeblue", cut = 0.5)
model_name = c("Model 1", "Model 2", "Model 3", "Model 4")
result = data.frame(model_name, train_errors, test_errors)
colnames(result) = c("Classifier", "Train Standard Error", "Test Standard Error")
result %>% kable() %>% kable_styling()
q2_train_data = read.csv("h3p1-trn-data.csv")
q2_test_data = read.csv("h3p1-tst-data.csv")
get_logistic_error = function(mod, data, res = "y", pos = 1, neg = 0, cut = 0.5) {
probs = predict(mod, newdata = data, type = "response")
preds = ifelse(probs > cut, pos, neg)
calc_class_err(actual = data[, res], predicted = preds)
}
model_1 = glm(y ~ 1, data = q2_train_data)
q2_train_data = read.csv("h3p1-trn-data.csv")
q2_test_data = read.csv("h3p1-tst-data.csv")
get_logistic_error = function(mod, data, res = "y", pos = 1, neg = 0, cut = 0.5) {
probs = predict(mod, newdata = data, type = "response")
preds = ifelse(probs > cut, pos, neg)
calc_class_err(actual = data[, res], predicted = preds)
}
model_1 = glm(y ~ 1, data = q2_train_data, family = "binomial")
model_2 = glm(y ~ ., data = q2_train_data, family = "binomial")
model_3 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2), data = q2_train_data, family = "binomial")
model_4 = glm(y ~ . + I(x1 ^ 2) + I(x2 ^ 2) + I(x1 * x2), data = q2_train_data, family = "binomial")
model_list = list(model_1, model_2, model_3, model_4)
train_errors = sapply(model_list, get_logistic_error, data = q2_train_data,
res = "y", pos = "darkorange", neg = "dodgeblue", cut = 0.5)
test_errors = sapply(model_list, get_logistic_error, data = q2_test_data,
res = "y", pos = "darkorange", neg = "dodgeblue", cut = 0.5)
model_name = c("Model 1", "Model 2", "Model 3", "Model 4")
result = data.frame(model_name, train_errors, test_errors)
colnames(result) = c("Classifier", "Train Standard Error", "Test Standard Error")
result %>% kable() %>% kable_styling()
install.packages("formatR")
knitr::opts_chunk$set(echo = TRUE)
gc()
rm(list = ls())
library(ggplot2)
library(ISLR)
library(dplyr)
library(tidyr)
library(pander)
library(forcats)
library(DMwR)
library(ROSE)
library(caret)
# 0. EDA (Aaron's Part)
#   0.0 Distribution of Results
#   0.1 Distribution of Variables
# 1. Remove Unwanted Columns
# Done?
# Prep 0: Read CSV
train = data.frame(read.csv("training.csv"))
train$VehicleAge = as.factor(train$VehicleAge)
train$IsBadBuy = as.factor(train$IsBadBuy)
train_clean = read.csv("training_cleaned.csv")
train_clean$VehicleAge = as.factor(train_clean$VehicleAge)
train_clean$IsBadBuy = as.factor(train_clean$IsBadBuy)
# PREP 1: Split
set.seed(42)
train_idx = createDataPartition(train$IsBadBuy, p = 0.70, list = FALSE)
train_clean_idx = createDataPartition(train_clean$IsBadBuy, p = 0.70, list = FALSE)
trn = train[train_idx, ]
tst = train[-train_idx, ]
trn_clean = train_clean[train_clean_idx, ]
tst_clean = train_clean[-train_clean_idx, ]
# Prep 2: SMOTE
trn_smote = SMOTE(IsBadBuy ~ ., data = trn, perc.over = 200)
tst_smote = SMOTE(IsBadBuy ~ ., data = tst, perc.over = 200)
trn_clean_smote = SMOTE(IsBadBuy ~ ., data = trn_clean, perc.over = 200)
tst_clean_smote = SMOTE(IsBadBuy ~ ., data = tst_clean, perc.over = 200)
# 2. Model Implementation
#   2.1 Logistic
default_glm_mod = train(
form = IsBadBuy ~ .,
data = trn_clean_smote,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
